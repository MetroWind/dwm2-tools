var searchIndex = JSON.parse('{\
"breed_planner":{"doc":"","t":"AAOFFOFNNDNEDNNNDDEENLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMMMMLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENNLLLLLLLLLLLLLL","n":["breed","error","error","getOutputFileName","main","rterr","runDot","Any","Base","Breed","Breed","BreedOrSpec","BreedPlan","Female","Male","Mate","Monster","MonsterVis","Role","Sex","Spec","addSpec","addStep","base","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","fromMonster","fromStream","from_str","from_str","from_str","from_str","from_str","hash","hash","hash","index","into","into","into","into","into","into","into","label","mate","monster","name","name","new","new","outcome","plus_level_min","role","sex","specs","steps","toDot","toDotSpec","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","Error","FormatError","RuntimeError","borrow","borrow_mut","clone","clone_into","fmt","fmt","from","into","source","to_owned","to_string","try_from","try_into","type_id"],"q":[[0,"breed_planner"],[7,"breed_planner::breed"],[140,"breed_planner::error"]],"d":["","","","","","","","","","","","","","","","","A monster of some kind, like “a female RainHawk”. In a …","Monster visualization spec. This defines how the monster is","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","How to display a monster as a string. Note that if the sex …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","How to parse a Monster out of a string. This is the …","","","","","","","This is used to distiguish two monsters of the same kind …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Generate a label for this monster in the dot file.","","","Name of the kind of monster, e.g. “RainHawk”.","This is the in-game name of the monster, given by the …","","","","The minimal plus level required of this monster. 0 means no","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update this visualization spec from other visualization …","","","An error from the underlying data source. This could be a …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,0,11,12,0,14,0,0,11,11,12,0,0,0,0,14,7,7,10,7,11,12,13,8,10,14,7,11,12,13,8,10,14,11,12,13,8,10,14,11,12,13,8,10,14,11,12,13,8,10,14,11,12,13,8,10,14,11,11,12,13,13,8,10,14,7,11,12,13,8,10,14,8,7,11,13,8,10,14,11,13,8,13,7,11,12,13,8,10,14,8,10,8,13,8,7,13,10,13,8,13,7,7,7,8,11,12,13,8,10,14,11,13,7,11,12,13,8,10,14,7,11,12,13,8,10,14,7,11,12,13,8,10,14,8,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[0,0,0,[[1,1],[[4,[2,3]]]],[[],[[4,[3]]]],0,[[1,1],[[4,[[6,[5]],3]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[7,8],9],[[7,10]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11,11],[12,12],[13,13],[8,8],[10,10],[14,14],[[]],[[]],[[]],[[]],[[]],[[]],[[11,11],9],[[12,12],9],[[13,13],9],[[8,8],9],[[10,10],9],[[14,14],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[11,15],16],[[11,15],16],[[12,15],16],[[13,15],16],[[13,15],16],[[8,15],16],[[10,15],16],[[14,15],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[13,[17,[12]],[17,[2]]],8],[18,[[4,[7,3]]]],[1,[[4,[11]]]],[1,[[4,[13]]]],[1,[[4,[8]]]],[1,[[4,[10]]]],[1,[[4,[14]]]],[[11,19]],[[13,19]],[[8,19]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,2],0,0,0,0,[[],7],[[1,11],13],0,0,0,0,0,0,[7,2],[8,2],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[8,8]],0,0,0,[[]],[[]],[3,3],[[]],[[3,15],16],[[3,15],16],[[]],[[]],[3,[[17,[21]]]],[[]],[[],2],[[],4],[[],4],[[],20]],"c":[],"p":[[15,"str"],[3,"String"],[4,"Error"],[4,"Result"],[15,"u8"],[3,"Vec"],[3,"BreedPlan"],[3,"MonsterVis"],[15,"bool"],[3,"Breed"],[4,"Sex"],[4,"Role"],[3,"Monster"],[4,"BreedOrSpec"],[3,"Formatter"],[6,"Result"],[4,"Option"],[8,"BufRead"],[8,"Hasher"],[3,"TypeId"],[8,"Error"]]},\
"breed_web":{"doc":"","t":"AAFADILLMMLFFFFFLLFLLMKLLLFFLDLLLLMLFFFLLLLMMMLLLLLDDDGLLLLLLMMMLLLLLLLLLMMMMMMMLLLMLLLLLLLLLMLLL","n":["app","config","main","skill_detail","App","ToResponse","borrow","borrow_mut","config","data","from","getTeraFuncArgs","handleFamily","handleIndex","handleMonster","handleSkill","init","into","makeURLFor","new","serve","templates","toResponse","try_from","try_into","type_id","urlEncode","urlFor","vzip","Configuration","borrow","borrow_mut","clone","clone_into","data_dir","default","defaultListenAddr","defaultListenPort","defaultServePath","deserialize","from","fromFile","into","listen_address","listen_port","serve_under_path","to_owned","try_from","try_into","type_id","vzip","SkillCombination","SkillDetail","SkillReference","SkillUpgradePath","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","combines_from","combines_to","constituents","from","from","from","fromSkill","fromSkill","fromSkill","into","into","into","is_current","is_relevant","monsters","monsters","name","name","requirements","serialize","serialize","serialize","target","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upgrade_path","vzip","vzip","vzip"],"q":[[0,"breed_web"],[4,"breed_web::app"],[29,"breed_web::config"],[51,"breed_web::skill_detail"]],"d":["","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,10,10,10,10,10,0,0,0,0,0,10,10,0,10,10,10,24,10,10,10,0,0,10,0,12,12,12,12,12,12,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,19,20,22,19,20,22,22,22,20,19,20,22,19,20,22,19,20,22,19,19,19,22,19,22,22,19,20,22,20,19,20,22,19,20,22,19,20,22,22,19,20,22],"f":[0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],0,0,[[]],[[[5,[3,4]],6],[[7,[3]]]],[[3,8,9],[[2,[3,1]]]],[[8,9],[[2,[3,1]]]],[[3,8,9],[[2,[3,1]]]],[[3,8,9],[[2,[3,1]]]],[10,[[2,[1]]]],[[]],[3,11],[12,[[2,[10,1]]]],[10,[[2,[1]]]],0,[[],13],[[],2],[[],2],[[],14],[6,3],[[6,6],3],[[]],0,[[]],[[]],[12,12],[[]],0,[[],12],[[],3],[[],15],[[],3],[16,[[2,[12]]]],[[]],[6,[[2,[12,1]]]],[[]],0,0,0,[[]],[[],2],[[],2],[[],14],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[17,18,18,8],19],[[17,17,8],[[21,[20]]]],[[17,8],[[21,[22]]]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[19,23],2],[[20,23],2],[[22,23],2],0,[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],14],[[],14],[[],14],0,[[]],[[]],[[]]],"c":[],"p":[[4,"Error"],[4,"Result"],[3,"String"],[4,"Value"],[3,"HashMap"],[15,"str"],[6,"Result"],[3,"GameData"],[3,"Tera"],[3,"App"],[8,"Function"],[3,"Configuration"],[6,"Response"],[3,"TypeId"],[15,"u16"],[8,"Deserializer"],[3,"Skill"],[15,"bool"],[3,"SkillReference"],[3,"SkillCombination"],[4,"Option"],[3,"SkillDetail"],[8,"Serializer"],[8,"ToResponse"]]},\
"data":{"doc":"Data structures and logic about the DMW2 game data.","t":"DLLALMLLLLLLLALMLLALLLMLLLLLANDNEDMLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLDDDDDMMLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLMMMMLLLLLMMMMMMMMLLLLLMLLLLLLLLLLLLLLLLLLLLDDMMLLLLLLLLMLLMLLLMMLLMMMMLLLLLLLLLLMMDLLLLLLLFLLLLLL","n":["GameData","borrow","borrow_mut","breed","breedFromFormulae","breed_formulae","clone","clone_into","default","family","from","fromXML","into","monster","monster","monster_data","monstersInFamily","monstersWithSkill","skill","skill","skillCombinesInto","skillUpgradePath","skills","to_owned","try_from","try_into","type_id","usedInFormulae","xml","Family","Formula","Monster","Parent","ParentRequirement","base","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","from","from","from","fromXML","into","into","into","mate","min_plus","offspring","parent","serialize","serialize","serialize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Family","Growth","Info","MapLocation","Monster","agility","attack","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","defense","desc","exp","families","family","from","from","from","from","from","fromXML","growth","hp","in_story","intelligence","into","into","into","into","into","locations","map","max_level","members","monsters","mp","name","name","serialize","serialize","serialize","serialize","serialize","skills","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Requirements","Skill","agility","attack","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","combine_from","default","default","defense","from","from","fromXML","hp","intelligence","into","into","level","mp","name","requirements","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upgrade_from","upgrade_to","Parser","addBeginHandler","addEndHandler","addTagHandler","addTextHandler","borrow","borrow_mut","from","getTagAttr","into","new","parse","try_from","try_into","type_id"],"q":[[0,"data"],[29,"data::breed"],[74,"data::monster"],[158,"data::skill"],[197,"data::xml"]],"d":["All DWM2 game data. This is the entry point of the whole …","","","Data structures and logic about the DMW2 breed formulae","Find all the formulae that produces a specific monster.","All breed formulae","","","","Find familiy by name.","Returns the argument unchanged.","Create a GameData from XML.","Calls <code>U::from(self)</code>.","Data structures and logic about the DMW2 monsters and …","Find monster by name.","Data about monsters","Find all monsters in a family.","Find all monsters having a skill natrually.","Data structures and logic for skills","Find skill by name.","Return all the skills that <code>skill</code> and its upgrades combines …","Return the skill update path the skill is in. The result is","All skills","","","","","Find all the formulae a monster or a family is used in.","A simple XML parser based on quick-xml.","Any monster in this family could be the parent. Value …","A breed formula","The parent is this monster, whose name is the value.","A parent in a breed formula.","A parent in a breed formula, with some extra requirements.","The base monster in the formula.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The mate monster in the formula.","The minimal +level of this parent. Usually this is just 0. …","The name of the offspring monster.","The parent in the breed formula","","","","","","","","","","","","","","","","A family of monsters","Monster growth data","Data about a set of monsters and families.","A location in a map","The info of a monster","","","","","","","","","","","","","","","","","","","","","","","","","","","More detailed location within the map.","","A list of families","Family the monster belongs to","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Monster growth data","","Whether the monster can be find in the story maps","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Spawn location of the monster. Only monsters with …","Name of the map. Example: Oasis Key World.","","List of name of monsters in this family.","A list of monsters","","Name of the monster","Name of the family in <em>lower case</em>.","","","","","","Natural skills of the monster","","","","","","","","","","","","","","","","","","","","","Stat requirement for a skill to be learnt","A skill","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","This will not populate the <code>upgrade_to</code> field.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Name of the skill","Stats requirements of the skill","","","","","","","","","","","","","A simple event callback-based XML parser.","Add a callback for an opening tag. If the parser …","Add a callback for an end tag. If the parser encounters an …","Add a callback for a whole tag. If the parser encounters an","Add a callback for text element directly inside some tag. …","","","Returns the argument unchanged.","Return the value of the attribute <code>attr</code> from the opening tag","Calls <code>U::from(self)</code>.","Create a parser with no callbacks.","Parse the XML in the byte buffer <code>x</code>, triggering the …","","",""],"i":[0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,14,0,14,0,0,16,14,15,16,14,15,16,14,15,16,14,15,16,14,14,15,16,16,14,15,16,16,15,16,15,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,0,0,0,0,0,20,20,19,20,10,4,21,19,20,10,4,21,19,20,10,4,21,19,20,10,4,21,20,4,21,20,19,20,21,10,19,20,10,4,21,21,10,20,10,20,19,20,10,4,21,10,19,20,4,21,20,10,4,19,20,10,4,21,10,19,20,10,4,21,19,20,10,4,21,19,20,10,4,21,19,20,10,4,21,0,0,22,22,22,11,22,11,22,11,22,11,11,22,11,22,22,11,11,22,22,22,11,22,22,11,11,22,11,22,11,22,11,22,11,22,11,11,11,0,23,23,23,23,23,23,23,0,23,23,23,23,23,23],"f":[0,[[]],[[]],0,[[1,2],3],0,[1,1],[[]],[[],1],[[1,2],[[5,[4]]]],[[]],[[[7,[6]]],[[9,[1,8]]]],[[]],0,[[1,2],[[5,[10]]]],0,[[1,4],3],[[1,2],3],0,[[1,2],[[5,[11]]]],[[1,11],3],[[1,11],[[12,[11]]]],0,[[]],[[],9],[[],9],[[],13],[[1,14],3],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[14,14],[15,15],[16,16],[[]],[[]],[[]],[[14,14],17],[[]],[[]],[[]],[[[7,[6]]],[[9,[16,8]]]],[[]],[[]],[[]],0,0,0,0,[[14,18],9],[[15,18],9],[[16,18],9],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],13],[[],13],[[],13],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,19],[20,20],[10,10],[4,4],[21,21],[[]],[[]],[[]],[[]],[[]],[[],20],[[],4],[[],21],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[[7,[6]]],[[9,[21,8]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[19,18],9],[[20,18],9],[[10,18],9],[[4,18],9],[[21,18],9],0,[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,0,[[]],[[]],[[]],[[]],[22,22],[11,11],[[]],[[]],0,[[],22],[[],11],0,[[]],[[]],[[[7,[6]]],[[9,[11,8]]]],0,0,[[]],[[]],0,0,0,0,[[22,18],9],[[11,18],9],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],13],[[],13],0,0,0,[[23,2,24]],[[23,2,24]],[[23,2,24]],[[23,2,24]],[[]],[[]],[[]],[[25,2],[[9,[[5,[26]],8]]]],[[]],[[],23],[[23,[7,[6]]],[[9,[8]]]],[[],9],[[],9],[[],13]],"c":[],"p":[[3,"GameData"],[15,"str"],[8,"Iterator"],[3,"Family"],[4,"Option"],[15,"u8"],[15,"slice"],[4,"Error"],[4,"Result"],[3,"Monster"],[3,"Skill"],[3,"Vec"],[3,"TypeId"],[4,"Parent"],[3,"ParentRequirement"],[3,"Formula"],[15,"bool"],[8,"Serializer"],[3,"MapLocation"],[3,"Growth"],[3,"Info"],[3,"Requirements"],[3,"Parser"],[8,"FnMut"],[3,"BytesStart"],[8,"FromStr"]]},\
"error":{"doc":"","t":"ENNLLLLOLLLLOLLLLLLO","n":["Error","RuntimeError","XMLError","borrow","borrow_mut","clone","clone_into","error","fmt","fmt","from","into","rterr","source","to_owned","to_string","try_from","try_into","type_id","xmlerr"],"q":[[0,"error"]],"d":["","An error from the underlying data source. This could be a …","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,0],"f":[0,0,0,[[]],[[]],[1,1],[[]],0,[[1,2],3],[[1,2],3],[[]],[[]],0,[1,[[5,[4]]]],[[]],[[],6],[[],7],[[],7],[[],8],0],"c":[],"p":[[4,"Error"],[3,"Formatter"],[6,"Result"],[8,"Error"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
